import abc


class Task(metaclass=abc.ABCMeta):

    def __init__(self, id):
        self._id = id
        self._technique = self.__build_technique()
        pass

    def get_id(self):
        return self._id

    def __build_technique(self):
        from src.tasks.Utils import TaskUtils
        return TaskUtils.build_technique(self._id)

    @staticmethod
    @abc.abstractmethod
    def get_fields_for_technique():
        """
        Get the fields that are mandatory to execute the task. The source of the input fields can be the dataset or
        the result of another task.
        Field name convention:
            Dataset fields: 'dataset_*'
            Task fields: '*'
        :return: List of input fields that are mandatory for the task execution.
        """
        pass

    @abc.abstractmethod
    def run(self, resource_entries):
        """
        :return: List of results generated by the task for every resource entry that the technique were applied.
        """
        pass

    def train(self, train_set):
        pass

    def validate(self, dev_set):
        pass
