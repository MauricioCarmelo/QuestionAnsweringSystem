import abc
from src.Settings import Settings
from src.tasks.TechniqueNLTKTokenizerWithoutStopWords import TechniqueNLTKTokenizerWithoutStopWords
from src.tasks.TechniqueRuleBased import TechniqueRuleBased

class Task(metaclass=abc.ABCMeta):

    def __init__(self, task_id, task_name):
        self._id = task_id
        self._name = task_name
        self._technique = self._build_technique()
        self._should_evaluate = Settings.get_instance().should_evaluate(task_id)
        pass

    def build_technique(self, task_id):
        technique_name = Settings.get_instance().get_used_technique(task_id)

        if technique_name == 'nltkTokenizerWithoutStopWords':
            return TechniqueNLTKTokenizerWithoutStopWords('nltkTokenizerWithoutStopWords')
        elif technique_name == 'RuleBased':
            return TechniqueRuleBased('RuleBased')
        else:
            return None

    def get_id(self):
        return self._id

    def get_name(self):
        return self._name

    def should_evaluate(self):
        return self._should_evaluate

    def _build_technique(self):
        return self.build_technique(self._id)

    @staticmethod
    @abc.abstractmethod
    def get_fields_for_technique():
        """
        Get the fields that are mandatory to execute the task. The source of the input fields can be the dataset or
        the result of another task.
        Field name convention:
            Dataset fields: 'dataset_*'
            Task fields: '*'
        :return: List of input fields that are mandatory for the task execution.
        """
        pass

    @abc.abstractmethod
    def run(self, resource_entries):
        """
        :return: List of results generated by the task for every resource entry that the technique were applied.
        """
        pass

    def train(self, train_set):
        pass

    def validate(self, dev_set):
        pass
